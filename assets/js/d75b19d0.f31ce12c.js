"use strict";(self.webpackChunkjava_blog=self.webpackChunkjava_blog||[]).push([[885],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=i,g=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8155:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={title:"Type Conversion (\u7c7b\u578b\u8f6c\u5316)"},p=void 0,l={unversionedId:"spring/type_conversion",id:"spring/type_conversion",isDocsHomePage:!1,title:"Type Conversion (\u7c7b\u578b\u8f6c\u5316)",description:"Necessity in Developing Type Conversion",source:"@site/docs/spring/type_conversion.md",sourceDirName:"spring",slug:"/spring/type_conversion",permalink:"/spring/type_conversion",tags:[],version:"current",lastUpdatedAt:1634380083,formattedLastUpdatedAt:"10/16/2021",frontMatter:{title:"Type Conversion (\u7c7b\u578b\u8f6c\u5316)"},sidebar:"springSideBar",previous:{title:"Introduction to Factory Bean",permalink:"/spring/factory_bean"},next:{title:"Spring Parent Context",permalink:"/spring/parent_context"}},c=[{value:"Necessity in Developing Type Conversion",id:"necessity-in-developing-type-conversion",children:[]},{value:"Mechanism Supported",id:"mechanism-supported",children:[{value:"PropertyEditor",id:"propertyeditor",children:[]},{value:"ConversionService",id:"conversionservice",children:[]},{value:"ConverterFactory",id:"converterfactory",children:[]}]},{value:"Comparing Different Mechanism",id:"comparing-different-mechanism",children:[]}],m={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"necessity-in-developing-type-conversion"},"Necessity in Developing Type Conversion"),(0,a.kt)("p",null,"In Spring, there are lots of scenarios where it is needed to change type from A to B. For example, "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"When using ",(0,a.kt)("inlineCode",{parentName:"p"},"AnnotationConfigApplicationContext"),", we normally inject value stored in properties file to ",(0,a.kt)("inlineCode",{parentName:"p"},"@Component")," using ",(0,a.kt)("inlineCode",{parentName:"p"},"@Value")," annotation."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Service\npublic class ConnectionService {\n    @Value("connection.urls")\n    private List<String> urls; // url list to try, in case one cannot be connected\n    @Value("connection.maxtrial")\n    private int maxTrial; // max trial to try before throwing an exception\n}\n')),(0,a.kt)("p",{parentName:"li"},"And the corresponding properties file "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-properties"},"connection.urls=http://192.168.100.1:3000,http://192.168.100.2:3000\nconnection.maxtrial = 3\n")))),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"For XML Equivalent, "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class ConnectionService {\n    private int maxTrial; // max trial to try before throwing an exception\n    \n    // ...\n}\n")),(0,a.kt)("p",{parentName:"li"}," With the XML Configuration File being "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd">\n\n    <bean id="connectionService">\n        <property name="urls" value="http://192.168.100.1:3000,http://192.168.100.2:3000" />\n        <property name="maxTrial" value="3" />\n    </bean>\n</beans>\n')))),(0,a.kt)("p",null,"In both cases, Spring needs to automatically convert type so that the property can be injected in a proper way. But notice that I am using ",(0,a.kt)("inlineCode",{parentName:"p"},",")," as a delimiter to separate a String, and definitely others may have other choice to do so. So how can Spring know how to do the conversion? "),(0,a.kt)("h2",{id:"mechanism-supported"},"Mechanism Supported"),(0,a.kt)("p",null,"Spring actually support multiple ways for end user to register the conversion. Let's have a look at each of them. "),(0,a.kt)("p",null,"Instead of specifying the mechanism on how it works, I will provide an example here instead. "),(0,a.kt)("h3",{id:"propertyeditor"},"PropertyEditor"),(0,a.kt)("p",null,"This is a class in",(0,a.kt)("inlineCode",{parentName:"p"},"java.beans")," package, which is inside JDK. "),(0,a.kt)("p",null,"First create a  CustomPropertyEditor that implements ",(0,a.kt)("inlineCode",{parentName:"p"},"PropertyEditor"),", which is the core code for conversion. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class StringToListPropertyEditor extends PropertyEditorSupport implements PropertyEditor {\n  @Override\n  public void setAsText(String text) throws IllegalArgumentException {\n    List<String> list = Arrays.asList(text.split(","));\n    this.setValue(list);\n  }\n}\n')),(0,a.kt)("p",null,"As this is a Mechanism supplied by JDK, we can definitely test if the property editor is working as expected without using Spring. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void test() {\n    StringToListPropertyEditor propertyEditor = new StringToListPropertyEditor();\n    propertyEditor.setAsText("apple,banana");\n    List<String> fruits = (List) propertyEditor.getValue();\n    assertEquals(2, fruits.size());\n    assertEquals("apple", fruits.get(0));\n    assertEquals("banana", fruits.get(1));\n}\n')),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"At this stage, we have only create a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"PropertyEditor")," , however we still miss the following "),(0,a.kt)("ul",{parentName:"div"},(0,a.kt)("li",{parentName:"ul"},"We have not tell Spring to use the ",(0,a.kt)("inlineCode",{parentName:"li"},"PropertyEditor"),". We need some way to register it in Spring"),(0,a.kt)("li",{parentName:"ul"},"Spring may need to support many ",(0,a.kt)("inlineCode",{parentName:"li"},"PropertyEditor"),"s, but how can Spring determine which one to use? We should support the return setValue type, e.g. in above case ",(0,a.kt)("inlineCode",{parentName:"li"},"List"),"  to Spring so that Spring can better identify whether such ",(0,a.kt)("inlineCode",{parentName:"li"},"PropertyEditor")," can be used for the conversion or not. ")))),(0,a.kt)("p",null,"To register the PropertyEditor, we can do either of the following: "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Creating ",(0,a.kt)("inlineCode",{parentName:"p"},"customEditorConfigurer")," bean using ",(0,a.kt)("inlineCode",{parentName:"p"},"@Bean"),"."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Configuration\npublic class AppConfig {\n    @Bean\n    public CustomEditorConfigurer customEditorConfigurer() {\n      CustomEditorConfigurer customEditorConfigurer = new CustomEditorConfigurer();\n      Map<Class<?>, Class<? extends PropertyEditor>> propertyEditorMap = new HashMap<>();\n\n      // so that when @Value is placed on a field with type List, Spring will try to use the propertyEditor for conversion\n      propertyEditorMap.put(List.class, StringToListPropertyEditor.class);\n      customEditorConfigurer.setCustomEditors(propertyEditorMap);\n      return customEditorConfigurer;\n    }\n}\n")),(0,a.kt)("div",{parentName:"li",className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Do the beanName of ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomEditorConfigurer")," must be ",(0,a.kt)("inlineCode",{parentName:"p"},"customEditorConfigurer"),", in order for the above to work properly? Why or why not? "))))),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"PropertyEditorRegistrar"),", which I think is more user friendly when using it with XML Configuration. As specifying a map in XML format is way more complicated setup. "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class AppPropertyEditorRegistrar implements PropertyEditorRegistrar {\n    @Override\n    public void registerCustomEditors(PropertyEditorRegistry registry) {\\\n        registry.registerCustomEditor(List.class, new StringToListPropertyEditor());\n    }\n}\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd">\n\n    <bean id="customEditorConfigurer" class="org.springframework.beans.factory.config.CustomEditorConfigurer">\n        <property name="propertyEditorRegistrars">\n            <list>\n                <bean class="com.thechanist.tuling.spring.ch03.conversion.registrar.AppPropertyEditorRegistrar" />\n            </list>\n        </property>\n    </bean>\n    \n    <bean id="connectionService" class="com.thechanist.tuling.spring.ch03.services.ConnectionService">\n        <property name="urls" value="http://192.168.100.1:3000,http://192.168.100.2:3000" />\n        <property name="maxTrial" value="3" />\n    </bean>\n</beans>\n')))),(0,a.kt)("p",null,"   Here is the test code for the above setup. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void xmlClassTest() {\n    ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext("spring.xml");\n    ConnectionService connectionService = (ConnectionService) applicationContext.getBean("connectionService");\n\n    List<String> urls = connectionService.getUrls();\n    assertEquals(2, urls.size());\n    assertEquals("http://192.168.100.1:3000", urls.get(0));\n    assertEquals("http://192.168.100.2:3000", urls.get(1));\n}\n')),(0,a.kt)("h3",{id:"conversionservice"},"ConversionService"),(0,a.kt)("h3",{id:"converterfactory"},"ConverterFactory"),(0,a.kt)("h2",{id:"comparing-different-mechanism"},"Comparing Different Mechanism"))}u.isMDXComponent=!0}}]);