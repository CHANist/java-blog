"use strict";(self.webpackChunkjava_blog=self.webpackChunkjava_blog||[]).push([[895],{4916:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return g}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),o=["components"],l={id:"bean_core_analysis",title:"1. Spring\u5e95\u5c42\u6838\u5fc3\u539f\u7406\u89e3\u6790",tags:["Java","Spring","\u5716\u9748\u8ab2\u5802"]},s=void 0,p={unversionedId:"spring/bean_core_analysis",id:"spring/bean_core_analysis",isDocsHomePage:!1,title:"1. Spring\u5e95\u5c42\u6838\u5fc3\u539f\u7406\u89e3\u6790",description:"\u8bfe\u7a0b\u5185\u5bb9\uff1a",source:"@site/docs/spring/01-bean_core_analysis.md",sourceDirName:"spring",slug:"/spring/bean_core_analysis",permalink:"/spring/bean_core_analysis",tags:[{label:"Java",permalink:"/tags/java"},{label:"Spring",permalink:"/tags/spring"},{label:"\u5716\u9748\u8ab2\u5802",permalink:"/tags/\u5716\u9748\u8ab2\u5802"}],version:"current",lastUpdatedAt:1634182496,formattedLastUpdatedAt:"10/14/2021",sidebarPosition:1,frontMatter:{id:"bean_core_analysis",title:"1. Spring\u5e95\u5c42\u6838\u5fc3\u539f\u7406\u89e3\u6790",tags:["Java","Spring","\u5716\u9748\u8ab2\u5802"]},sidebar:"springSideBar",next:{title:"2. \u624b\u5199\u6a21\u62dfSpring\u5e95\u5c42\u539f\u7406",permalink:"/spring/handwriting_simple_spring"}},c=[{value:"Bean Creation Life Cycle",id:"bean-creation-life-cycle",children:[]},{value:"How to inject property value into an Object?",id:"how-to-inject-property-value-into-an-object",children:[]},{value:"How to trigger @PostConstruct method?",id:"how-to-trigger-postconstruct-method",children:[]},{value:"Designing which Constructor to be called",id:"designing-which-constructor-to-be-called",children:[]},{value:"Brief Understanding of Spring AOP",id:"brief-understanding-of-spring-aop",children:[]},{value:"Brief Understanding of Spring Transaction Management",id:"brief-understanding-of-spring-transaction-management",children:[]},{value:"Dummy Notes",id:"dummy-notes",children:[]},{value:"Questions",id:"questions",children:[]},{value:"Question",id:"question",children:[]},{value:"Transactional Management",id:"transactional-management",children:[]}],u={toc:c};function g(e){var t=e.components,a=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u8bfe\u7a0b\u5185\u5bb9\uff1a"),(0,r.kt)("ol",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ol"},"Bean\u7684\u751f\u547d\u5468\u671f\u5e95\u5c42\u539f\u7406"),(0,r.kt)("li",{parentName:"ol"},"\u4f9d\u8d56\u6ce8\u5165\u5e95\u5c42\u539f\u7406"),(0,r.kt)("li",{parentName:"ol"},"\u521d\u59cb\u5316\u5e95\u5c42\u539f\u7406"),(0,r.kt)("li",{parentName:"ol"},"\u63a8\u65ad\u6784\u9020\u65b9\u6cd5\u5e95\u5c42\u539f\u7406"),(0,r.kt)("li",{parentName:"ol"},"AOP\u5e95\u5c42\u539f\u7406"),(0,r.kt)("li",{parentName:"ol"},"Spring\u4e8b\u52a1\u5e95\u5c42\u539f\u7406"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"bean-creation-life-cycle"},"Bean Creation Life Cycle"),(0,r.kt)("p",null,"--\x3e Scan through the package, and see @Service in ",(0,r.kt)("inlineCode",{parentName:"p"},"UserService"),"\nAlternatively, can be using XML"),(0,r.kt)("p",null,"--\x3e Constructor (decide which constructor to use)\n--\x3e object created by Spring"),(0,r.kt)("p",null,"--\x3e dependency injected (through property) ","[e.g. through annotation ",(0,r.kt)("inlineCode",{parentName:"p"},"@Autowired"),"]"),(0,r.kt)("p",null,"--\x3e before initialization ","[",(0,r.kt)("inlineCode",{parentName:"p"},"@PostConstruct"),"]"),(0,r.kt)("p",null,"--\x3e initializing bean"),(0,r.kt)("p",null,"--\x3e after initialization ","[use e.g. in ",(0,r.kt)("inlineCode",{parentName:"p"},"Spring AOP"),"]"),(0,r.kt)("p",null,"--\x3e Proxy Object Bean "),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"how-to-inject-property-value-into-an-object"},"How to inject property value into an Object?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// assume bean is the object bean created by Spring\nfor (Field field: bean.getClass().getFields()) {\n    if (field.isAnnotationPresent(Autowired.class)) {\n        field.set(bean, ??);\n    }\n}\n")),(0,r.kt)("p",null,"where ?? is the object reference to be set to the field.\nSo what remains are where the object reference is, how can we get that. This is beyond today's topic though. We will have a more in-depth look later."),(0,r.kt)("h3",{id:"how-to-trigger-postconstruct-method"},"How to trigger @PostConstruct method?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// assume bean is the object bean created by Spring\nfor (Method method: bean.getClass().getMethods()) {\n    if (method.isAnnotationPresent(PostConstruct.class)) {\n        // as PostConstruct should carry no arguments at all,,,\n        method.invoke(bean, null);\n    }\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"designing-which-constructor-to-be-called"},"Designing which Constructor to be called"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"brief-understanding-of-spring-aop"},"Brief Understanding of Spring AOP"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"brief-understanding-of-spring-transaction-management"},"Brief Understanding of Spring Transaction Management"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"dummy-notes"},"Dummy Notes"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912131115437.png",alt:"image-20210912131115437"})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912123146443.png",alt:"image-20210912123146443"})),(0,r.kt)("p",null,"Always go for no argument constructor if possible. "),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912124027590.png",alt:"image-20210912124027590"})),(0,r.kt)("p",null,"If only has one constructor, with parameter, Spring will try to get a bean with such class and pass it to you. Therefore it will pass with value!!! "),(0,r.kt)("h3",{id:"questions"},"Questions"),(0,r.kt)("p",null,"So when should I use @Autowired, and when should I use constructor injection?"),(0,r.kt)("p",null,"In case, if OrderService is not registered as a Spring bean, then instead of passing a null parameter to UserService, it will throw Exception instead."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912124556850.png",alt:"image-20210912124556850"})),(0,r.kt)("p",null,"It will be injected based on Java type. In case there are multiple ones, it will choose the one with the same bean name. In case if the there are no corresponding one, e.g. convert it to ",(0,r.kt)("inlineCode",{parentName:"p"},"orderService123"),", it will throw Exception. "),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912130723537.png",alt:"image-20210912130723537"})),(0,r.kt)("h3",{id:"question"},"Question"),(0,r.kt)("p",null,"Isn't Java will encrypt the parameter name when compiled, so will the logic work when we compile our java into .class files? "),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912131005813.png",alt:"image-20210912131005813"})),(0,r.kt)("p",null,"it will create bean name based on the method name. So this bean will override the @Component one, and this will have the same object reference. "),(0,r.kt)("p",null,"Further Work:\nTry to validate this. "),(0,r.kt)("p",null,"Of course, if there are multiple constructor, we can tell Spring which one to use, by specifying @Autowired in the constructor. "),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912131354137.png",alt:"image-20210912131354137"})),(0,r.kt)("p",null,"@Autowired is the same, it will first try by type, then by name, to do injection.qw"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912133238189.png",alt:"image-20210912133238189"})),(0,r.kt)("p",null,"Using AOP"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912133404443.png",alt:"image-20210912133404443"})),(0,r.kt)("p",null,"How would it behaved? "),(0,r.kt)("p",null,"We will get a Proxy \uff08\u4ee3\u7406\uff09"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912145103511.png",alt:"image-20210912145103511"})),(0,r.kt)("p",null,"As it just extends the original UserService, therefore, OrderService does not have any value at this stage. "),(0,r.kt)("p",null,"In order to have data in UserService, instead of calling  super.test(), we are going to use Dependency Injection, and inject the original UserService. "),(0,r.kt)("p",null,"This is indeed the way, how Proxy works, and this also shows why it does not have OrderService in the Proxy, but it works. "),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912150302860.png",alt:"image-20210912150302860"})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912145818297.png",alt:"image-20210912145818297"})),(0,r.kt)("p",null,"Aspect is a form of Bean as well, as can be seend from @Component. "),(0,r.kt)("p",null,"And you can create a lot of methods to \u5207\u4e00\u500b\u65b9\u6cd5\u3002\n-> \u627e\u56de\u6240\u6709\u5207\u9762bean"),(0,r.kt)("p",null,"-> iterate all these beans"),(0,r.kt)("p",null,"-> place it in a map for cache first"),(0,r.kt)("p",null,"So that when we create an AOP Proxy, we can create 1 Proxy and do all the \u5207\u9762 before / after the method. "),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912151151863.png",alt:"image-20210912151151863"})),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"transactional-management"},"Transactional Management"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912151600657.png",alt:"image-20210912151600657"})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912151649303.png",alt:"image-20210912151649303"})),(0,r.kt)("p",null,"-> Data is inserted into the database unexpectedly, this is due to lack of @Configuration in AppConifg. "),(0,r.kt)("p",null,"We will tell you why it does not work when @Configuration is not used at that time. "),(0,r.kt)("p",null,"Using @Transactional, actually uses AOP. But how does it work? "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"scan for @Trasactional "),(0,r.kt)("li",{parentName:"ol"},"create a connection to database (using transactional manager, dataSource)"),(0,r.kt)("li",{parentName:"ol"},"conn.autocommit = false, // as default is true, which will auto commit the MySQL statement to server, which will destroy the transaction. As transactional management means all or nothing. ")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"it will auto create code, like\nconn.commit();\nconn.rollback(); ")),(0,r.kt)("p",null,"Note that @Transactional also allow setting of Propagation, e.g.\nPropagation.NEVER, // if a transaction already exists, then it cannot call the current method.  "),(0,r.kt)("p",null,"Propagation."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912152409271.png",alt:"image-20210912152409271"})),(0,r.kt)("p",null,"Why it does not throw any exception?"),(0,r.kt)("p",null,"As a(), is called by \u666e\u901a\u65b9\u6cd5\uff0cnot calling the proxy one. As if it is not called by Proxy object, @Transactional(propagation) will not work. "),(0,r.kt)("p",null,"-> create another class and calling the other bean. As if calling another bean from @Autowired, it will be created by Spring bean. As the bean has @Transactional, it will create a proxy, which makes @Transactional(propagation) will work, and throw exception. "),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912152726700.png",alt:"image-20210912152726700"})),(0,r.kt)("p",null,"But this sounds stupid, why creating another new class, instead we can solve it more easily, by @Autowired itself, so that the @Transactional will work as well.  "),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912152912036.png",alt:"image-20210912152912036"})),(0,r.kt)("p",null,"Question"),(0,r.kt)("p",null,"Why if no @Configuration, it does not work?"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912153135478.png",alt:"image-20210912153135478"})),(0,r.kt)("p",null,"Without @Configuration, it will create 2 different dataSource(), instead of reusing the same one. "),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'jdbcTemplate.exec("insert XXX"); ')),(0,r.kt)("p",null,"will work but as we did not change ",(0,r.kt)("inlineCode",{parentName:"p"},"conn.autocomit = false")," "),(0,r.kt)("p",null,"We need transactionManager to modify the datasource to ",(0,r.kt)("inlineCode",{parentName:"p"},"conn.autocommit = false")," to make it work. "),(0,r.kt)("p",null,"@Configuration ensures the 2 data sources are retrieving the same object. But how Spring ensures it to be the same data source, we will discuss it later. "),(0,r.kt)("p",null,"This relates to Proxy Pattern \u4ee3\u7406\u6a21\u5f0f\uff0cit will first check if dataSource available, if not available, then it will create one, if it has one, it will reuse it. "),(0,r.kt)("hr",null))}g.isMDXComponent=!0}}]);