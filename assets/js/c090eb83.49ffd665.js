"use strict";(self.webpackChunkjava_blog=self.webpackChunkjava_blog||[]).push([[143],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return g}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),g=r,d=u["".concat(p,".").concat(g)]||u[g]||m[g]||i;return t?a.createElement(d,o(o({ref:n},c),{},{components:t})):a.createElement(d,o({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3260:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],l={id:"handwriting_simple_spring",title:"2. \u624b\u5199\u6a21\u62dfSpring\u5e95\u5c42\u539f\u7406",tags:["Java","Spring","\u5716\u9748\u8ab2\u5802"]},p=void 0,s={unversionedId:"spring_advanced/handwriting_simple_spring",id:"spring_advanced/handwriting_simple_spring",isDocsHomePage:!1,title:"2. \u624b\u5199\u6a21\u62dfSpring\u5e95\u5c42\u539f\u7406",description:"\u8bfe\u7a0b\u5185\u5bb9\uff1a",source:"@site/docs/spring_advanced/02-handwriting_simple_spring.md",sourceDirName:"spring_advanced",slug:"/spring_advanced/handwriting_simple_spring",permalink:"/spring_advanced/handwriting_simple_spring",tags:[{label:"Java",permalink:"/tags/java"},{label:"Spring",permalink:"/tags/spring"},{label:"\u5716\u9748\u8ab2\u5802",permalink:"/tags/\u5716\u9748\u8ab2\u5802"}],version:"current",lastUpdatedAt:1634362043,formattedLastUpdatedAt:"10/16/2021",sidebarPosition:2,frontMatter:{id:"handwriting_simple_spring",title:"2. \u624b\u5199\u6a21\u62dfSpring\u5e95\u5c42\u539f\u7406",tags:["Java","Spring","\u5716\u9748\u8ab2\u5802"]},sidebar:"springAdvancedSideBar",previous:{title:"1. Spring\u5e95\u5c42\u6838\u5fc3\u539f\u7406\u89e3\u6790",permalink:"/spring_advanced/bean_core_analysis"},next:{title:"3. Spring\u4e4b\u5e95\u5c42\u67b6\u6784\u6838\u5fc3\u6982\u5ff5\u89e3\u6790",permalink:"/spring_advanced/bean_core_concept_analysis"}},c=[{value:"IntelliJ Usage",id:"intellij-usage",children:[]}],m={toc:c};function u(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:""}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u8bfe\u7a0b\u5185\u5bb9\uff1a"),(0,i.kt)("ol",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u901a\u8fc7\u624b\u5199\u6a21\u62df\uff0c\u4e86\u89e3Spring\u7684\u5e95\u5c42\u6e90\u7801\u542f\u52a8\u8fc7\u7a0b")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u901a\u8fc7\u624b\u5199\u6a21\u62df\uff0c\u4e86\u89e3BeanDefinition\u3001BeanPostProcessor\u7684\u6982\u5ff5")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u901a\u8fc7\u624b\u5199\u6a21\u62df\uff0c\u4e86\u89e3Spring\u89e3\u6790\u914d\u7f6e\u7c7b\u7b49\u5e95\u5c42\u6e90\u7801\u5de5\u4f5c\u6d41\u7a0b")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u901a\u8fc7\u624b\u5199\u6a21\u62df\uff0c\u4e86\u89e3\u4f9d\u8d56\u6ce8\u5165\uff0cAware\u56de\u8c03\u7b49\u5e95\u5c42\u6e90\u7801\u5de5\u4f5c\u6d41\u7a0b")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u901a\u8fc7\u624b\u5199\u6a21\u62df\uff0c\u4e86\u89e3Spring AOP\u7684\u5e95\u5c42\u6e90\u7801\u5de5\u4f5c\u6d41\u7a0b")))),(0,i.kt)("p",null,"When will Spring create bean, line 1 or line 2? "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public static void main(String[] args) {\n    AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class); // 1\n    UserService userService = context.getBean("UserService"); // 2   \n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"All non-lazy \uff08\u975e\u61d2\u52a0\u8f7d\uff09singleton\uff08\u5355\u4f8b\uff09 bean will be created in 1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Lazy \uff08\u61d2\u52a0\u8f7d\uff09beans or Prototype \uff08\u539f\u578b\uff0c\u591a\u4f8b\uff09 Beans will be created in 2"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Service\n@Lazy // to specify it is a lazy bean\npublic class UserService {\n    \n}\n")),(0,i.kt)("p",null,"If not specified, by default, it is a non-lazy bean. "),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Handling ",(0,i.kt)("inlineCode",{parentName:"p"},"AnnotationConfigApplicationContext"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"@Component"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"@Scope"),". "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210919104007418.png",alt:"image-20210919104007418"})),(0,i.kt)("p",null,"3 Class Loaders (~ 30:00:00), what are these? ",(0,i.kt)("inlineCode",{parentName:"p"},"Boot"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Ext"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"App"),"? "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"AppClassLoader")," get classes from the above . "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210919104145923.png",alt:"image-20210919104145923"})),(0,i.kt)("p",null,"Spring use ASM technology to find if the target class file has Annotation, but we use a much simpler approach, buy loading class file into a class. "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210919104503520.png",alt:"image-20210919104503520"})),(0,i.kt)("p",null,"Pretty hard code, fix the project must start with ",(0,i.kt)("inlineCode",{parentName:"p"},"com"),", which is not practical at all, but what importance is the idea. "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210919104619537.png",alt:"image-20210919104619537"})),(0,i.kt)("p",null,"How to store data... "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a ",(0,i.kt)("inlineCode",{parentName:"li"},"BeanDefinition")," type, which stores the BeanDefinition information, e.g. scope ","[Singleton / Prototype]",", type ","[what class type it is, for later creation]",", isLazy ","[whether the bean should be lazily initiated or not]",". "),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Map<String, BeanDefinition>")," store beanName to beanDefinition, for easy retrieval of beanDefinition from beanName"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Map<String, Object> singletonObjects"),", which stores the mapping of beanName to the singleton objects.")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"1:17:00"),(0,i.kt)("p",null,"How to handle ",(0,i.kt)("inlineCode",{parentName:"p"},"@Autowired"),"?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It can be obtained from SingletonObjects.\nBut sometimes, it may not create, so it may need to get from BeanDefinitions. ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Object instance = ...;\nfor (Field field: clazz.getDeclaredFields()) {\n    if (field.isAnnotationPresent(Autowired.class)) {\n        field.setAccessible(true);\n        // get bean from using bean name. \n        // this will have \u5faa\u73af\u4f9d\u8d56\u7684\u95ee\u9898\n        field.set(instance, getBean(field.getName()));\n    }\n}\n")),(0,i.kt)("p",null,"1:28:00"),(0,i.kt)("p",null,"Handling initializing "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public interface InitializingBean {\n    void afterPropertiesSet();\n}\n")),(0,i.kt)("p",null,"1:30:00"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public interface BeanPostProcessor {\n    default Object postProcessBeforeInitialization(Object bean, String beanName) {\n        return bean;\n    }\n    \n    default Object portProcessAfterInitialization(Objcet bean, String beanName) throws BeanException {\n        return bean; \n    }\n}\n")),(0,i.kt)("p",null,"As this Processor needs to be initiated before other beans. therefore it will be create in ",(0,i.kt)("inlineCode",{parentName:"p"},"scan")," process, instead of normal createBean steps. "),(0,i.kt)("p",null,"Why ",(0,i.kt)("inlineCode",{parentName:"p"},"portProcessAfterInitialization")," need to return an object, what is the common use case of it?\nIn Spring, it is used in Spring AOP."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Component\npublic class SampleBeanPostProcessor implement BeanPostProcessor {\n    @Override\n    public Object portProcessAfterInitialization(Objcet bean, String beanName) throws BeanException {\n        if ("userService".equals(beanName)) {\n            Object proxy = Proxy.newProxyInstance(this.getClassLoader(), bean.getClass().getInterfaces(), new InvocationHandler() {\n                @Override\n                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                    System.out.println("\u5207\u9762\u903b\u8f91");\n                    return method.invoke(bean, args);\n                }\n            });\n            return proxy;\n        }\n        \n        return bean; \n    }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210919204722336.png",alt:"image-20210919204722336"})),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"postProcessBeforeInitialization"),", it is commonly used to support custom annotation on some field. "),(0,i.kt)("p",null,"Here is an example, "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface ZhouyuValue {\n    String value() default "";\n}\n\n@Component("orderService")\npublic class OrderServiceImpl implements OrderService {\n    @Autowired\n    private UserService userService;\n    \n    @ZhouyuValue\n    private String test;\n\n    public void test() {\n        System.out.println("test");\n    }\n}\n\n@Component\npublic class SampleBeanPostProcessor implement BeanPostProcessor {\n    @Override\n    public Object postProcessBeforeInitialization(Objcet bean, String beanName) throws BeanException {\n        for (Field field: bean.getClass().getDeclaredFields()) {\n            if (field.isAnnotationPresent(ZhouyuValue.class)) {\n                field.set(bean, field.getAnnotation(ZhouyuValue.class).value());\n            }\n        }\n    }\n}\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Spring also support getting the beanName from Spring, by implementing ",(0,i.kt)("inlineCode",{parentName:"p"},"BeanNameAware")," interface. "),(0,i.kt)("p",null,"\u6709\u65f6\u5019\uff0c\u4f60\u60f3\u77e5\u9053\u4f60\u73b0\u5728\u7684BeanName \u53eb\u4ec0\u4e48\u540d\u5b57\uff0c\u90a3\u4f60\u53ef\u4ee5implement \u8fd9\u4e2a\u65b9\u6cd5\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public interface BeanNameAware {\n    void setBeanName(String name);\n}\n")),(0,i.kt)("p",null,"Of course, this is very easy to do. Indeed Spring support many different Aware, and we do not specifiy each of them one by one. "),(0,i.kt)("p",null,"Indeed Spring does all the Aware in the same ",(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationContextAwareProcessor")," to call all **Aware interface, and is triggered in ",(0,i.kt)("inlineCode",{parentName:"p"},"postProcessBeforeInitialization"),". "),(0,i.kt)("hr",null),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"intellij-usage"},"IntelliJ Usage"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210919105912256.png",alt:"image-20210919105912256"})),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210919105822847.png",alt:null})),(0,i.kt)("p",null,"Extract Method"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210919110033298.png",alt:"image-20210919110033298"})),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"C:%5CUsers%5Chphch%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210919110111178.png",alt:"image-20210919110111178"})))}u.isMDXComponent=!0}}]);